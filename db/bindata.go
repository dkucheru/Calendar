// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/20210721143846-create_user_table.sql

package db


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataMigrations20210721143846createusertableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x5f\x4f\x83\x30\x14\xc5\xdf\xfb\x29\xee\x23\x44\xf7\x62\xb2\x27\x9e\xba\xad\xba\x46\xfe\xa5\x14\x75\xbe\x98\x66\xdc\x38\x92\xad\x10\x5a\xf5\xeb\x1b\x64\x58\x88\x93\x8c\xfb\x04\x5c\x7e\xed\x39\xe7\x5e\xb2\x58\xc0\xcd\xa9\x7c\x6f\x94\x45\xc8\x6b\xb2\x16\x8c\x4a\x06\x92\xae\x42\x06\xfc\x1e\xe2\x44\x02\x7b\xe1\x99\xcc\x00\x3f\x51\x5b\x03\x1e\x01\x80\xee\xa5\x2c\xc0\xd5\x8a\x3f\x64\x4c\x70\x1a\xc2\xa5\x6a\xcf\x89\xf3\x30\xbc\x75\xf4\x9b\x56\x27\xec\xfb\x4f\x54\xac\xb7\x54\x78\x77\xcb\xa5\x7f\x1d\x6d\xac\x6a\xec\xb9\x2f\x79\xc4\x32\x49\xa3\x14\x9e\xb9\xdc\x26\xb9\xfc\xf9\x02\xaf\x49\xcc\xfe\xa1\x51\x3b\xed\xf3\xe9\x02\xcd\xbe\x29\x6b\x5b\x56\x7a\xa4\x7c\xf8\x8f\x3a\xe2\x35\xfa\x3a\x24\x15\x3c\xa2\x62\x07\x8f\x6c\x07\xde\x39\x5b\x9f\xf8\x01\x99\x1a\xc8\x87\xc1\xa6\x9f\x47\xfb\xfc\x9b\xe7\x54\x98\x63\x3b\x07\x65\x0e\x58\xd4\xca\x98\x59\x58\x7b\xdb\xb1\xda\xab\x3f\x01\x4c\x63\x23\x97\xbd\xe2\xce\xe6\x70\x0d\x37\xd5\x97\x26\x1b\x91\xa4\xce\xf5\xd0\x71\x70\xb9\xd7\xad\x67\x40\xbe\x03\x00\x00\xff\xff\x3a\xe5\xb0\xfb\xd2\x02\x00\x00")

func bindataMigrations20210721143846createusertableSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataMigrations20210721143846createusertableSql,
		"../migrations/20210721143846-create_user_table.sql",
	)
}



func bindataMigrations20210721143846createusertableSql() (*asset, error) {
	bytes, err := bindataMigrations20210721143846createusertableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "../migrations/20210721143846-create_user_table.sql",
		size: 722,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1627469597, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"../migrations/20210721143846-create_user_table.sql": bindataMigrations20210721143846createusertableSql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"..": {Func: nil, Children: map[string]*bintree{
		"migrations": {Func: nil, Children: map[string]*bintree{
			"20210721143846-create_user_table.sql": {Func: bindataMigrations20210721143846createusertableSql, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
